{"version":3,"file":"popup.bundle.js","mappingssources":["webpack://textpilot/./src/popup.js"],"sourcesContent":["document.getElementById('keywords').addEventListener('keydown', async (e) => {\r\n  const input = e.target;\r\n  const output = document.getElementById('output');\r\n  \r\n  if (e.key === 'Tab') {\r\n    e.preventDefault(); // Prevent default tab behavior\r\n    \r\n    try {\r\n      const response = await new Promise((resolve, reject) => {\r\n        chrome.runtime.sendMessage({ \r\n          action: 'generate', \r\n          keywords: input.value \r\n        }, (response) => {\r\n          if (chrome.runtime.lastError) {\r\n            reject(new Error(chrome.runtime.lastError.message));\r\n          } else if (response && response.error) {\r\n            reject(new Error(response.error));\r\n          } else {\r\n            resolve(response);\r\n          }\r\n        });\r\n      });\r\n\r\n      if (response && response.paragraph) {\r\n        input.value = response.paragraph;\r\n        output.innerHTML = `\r\n          <div class=\"success\">‚úì Text accepted</div>\r\n          <div class=\"result\">${response.paragraph}</div>\r\n        `;\r\n      }\r\n    } catch (error) {\r\n      console.error('Generation error:', error);\r\n      output.innerHTML = `\r\n        <div class=\"error\">‚ö†Ô∏è Error: ${error.message || 'Failed to generate text'}</div>\r\n      `;\r\n    }\r\n  }\r\n});\r\n\r\n// Keep existing click handler\r\ndocument.getElementById('generate').addEventListener('click', async () => {\r\n  const button = document.getElementById('generate');\r\n  const output = document.getElementById('output');\r\n  const keywords = document.getElementById('keywords').value;\r\n\r\n  if (!keywords.trim()) {\r\n    output.innerHTML = `<div class=\"error\">‚ö†Ô∏è Please enter some keywords</div>`;\r\n    return;\r\n  }\r\n\r\n  try {\r\n    button.textContent = 'Generating...';\r\n    button.disabled = true;\r\n    \r\n    const response = await new Promise((resolve, reject) => {\r\n      chrome.runtime.sendMessage({ action: 'generate', keywords }, (response) => {\r\n        if (chrome.runtime.lastError) {\r\n          reject(new Error(chrome.runtime.lastError.message));\r\n        } else if (response && response.error) {\r\n          reject(new Error(response.error));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n\r\n    if (response && response.paragraph) {\r\n      output.innerHTML = `\r\n        <div class=\"success\">‚úì Generation successful</div>\r\n        <div class=\"result\">${response.paragraph}</div>\r\n      `;\r\n    } else {\r\n      throw new Error('Invalid response format');\r\n    }\r\n  } catch (error) {\r\n    console.error('Generation error:', error);\r\n    output.innerHTML = `\r\n      <div class=\"error\">‚ö†Ô∏è Error: ${error.message || 'Failed to generate text'}</div>\r\n    `;\r\n  } finally {\r\n    button.textContent = 'Generate Paragraph';\r\n    button.disabled = false;\r\n  }\r\n});\r\n\r\n// Add status indicator for extension\r\ndocument.addEventListener('DOMContentLoaded', async () => {\r\n  const status = document.createElement('div');\r\n  status.className = 'status-indicator';\r\n  \r\n  try {\r\n    // Test API connection\r\n    await new Promise((resolve, reject) => {\r\n      chrome.runtime.sendMessage({ \r\n        action: 'getSuggestion', \r\n        text: 'Hello world' \r\n      }, (response) => {\r\n        if (chrome.runtime.lastError) {\r\n          reject(new Error(chrome.runtime.lastError.message));\r\n        } else if (response && response.error) {\r\n          reject(new Error(response.error));\r\n        } else {\r\n          resolve(response);\r\n        }\r\n      });\r\n    });\r\n    status.innerHTML = 'üü¢ TextPilot Active';\r\n  } catch (error) {\r\n    console.error('Status check error:', error);\r\n    status.innerHTML = 'üî¥ API Key Required';\r\n  }\r\n  \r\n  document.querySelector('.container').appendChild(status);\r\n});"],"names":[],"sourceRoot":""}